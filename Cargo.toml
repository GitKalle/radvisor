[package]
name = "radvisor"
version = "1.3.0"
authors = ["Joseph Azevedo <joseph.az@gatech.edu>", "Bhanu Garg <bgarg6@gatech.edu>"]
description = """\
Resource utilization monitor for Docker containers & Kubernetes pods
that operates with fine granularity and low overhead"""
edition = "2018"
readme = "README.md"
license = "MIT"
repository = "https://github.com/elba-kubernetes/radvisor"
keywords = ["resource-monitor", "docker", "instrumentation", "cgroups", "kubernetes", "linux"]
categories = ["command-line-utilities"]

[package.metadata.deb]
license-file = ["./LICENSE", "0"]
extended-description="""\
Monitors & collects system resource utilization on Linux for Docker containers and Kubernetes pods
with fine granularity and low overhead, emitting resource utilization logs in CSVY (csv + yaml) format.
Originally, developed in Rust as a custom tool to help detect and analyze millibottlenecks in containerized online systems,
rAdvisor runs by polling the target provider (either the local Docker daemon or the Kubernetes API server)
every 1 second to get a list of active, running containers/pods.
From this list, rAdvisor runs a collection thread every 50ms to get resource utilization data for each active target using Linux cgroups,
outputting the resultant logs in /var/log/radvisor/stats."""
section = "util"
priority = "optional"
assets = [
    # Docs files
    ["out/docs/changelog.tar.gz", "usr/share/doc/radvisor/", "644"],
    ["out/docs/docs.tar.gz", "usr/share/doc/radvisor/", "644"],
    ["out/docs/readme.tar.gz", "usr/share/doc/radvisor/", "644"],
    # Manpages
    ["out/man/radvisor*.1.gz", "usr/share/man/man1/", "644"],
    # Shell completion files
    ["out/completion/bash", "usr/share/bash-completion/completions/radvisor", "644"],
    ["out/completion/fish", "usr/share/fish/vendor_completions.d/radvisor.fish", "644"],
    # Unsure where elvish/powershell completion files go
    # Binary executables
    ["out/radvisor", "usr/bin/", "755"],
]

[lib]
name = "radvisor"
path = "src/lib.rs"

[[bin]]
name = "radvisor"
path = "src/main.rs"

[dependencies]
bus = "2.2.3"
csv = "1.1.4"
failure = "0.1.8"
itoa = { version = "0.4.6", features = ["i128"] }
arraystring = { version = "0.3", features = ["serde-traits"] }
atoi = "0.3.3"
num-traits = "0.2.14"
ctrlc = { version = "3.1.7", features = ["termination"] }
futures-01 = { package = "futures", version = "0.1", optional = true}
tokio-01 = { package = "tokio", version = "0.1", optional = true }
tokio-02 = { package = "tokio", version = "0.2", features = ["rt-core"], optional = true }
lazy_static = "1.4.0"
gethostname = "0.2.1"
serde = { version = "1.0.117", features = ["derive"] }
serde_yaml = "0.8.14"
human-panic = "1.0.3"
textwrap = "0.12.1"
termcolor = "1.1.0"
atty = "0.2.14"
humantime = "2.0.1"
strum = "0.19.5"
strum_macros = "0.19.4"
byte-unit = "4.0.9"
sys-info = "0.7.0"
clap = { version = "3.0.0-beta.2", default-features = false, features = [ "std", "suggestions", "color", "derive", "wrap_help" ] }
# Kubernetes-specific dependencies
k8s-openapi = { version = "0.9.0", default-features = false, features = ["v1_15"], optional = true  }
kube = { version = "0.43.0", optional = true }
kube-runtime = { version = "0.43.0", optional = true }
kube-derive = { version = "0.43.0", optional = true }

# Unix-specific dependencies
[target.'cfg(unix)'.dependencies]
libc = "0.2.80"
shiplift = { version = "0.6.0", optional = true }

# Windows-specific dependencies
[target.'cfg(windows)'.dependencies]
winapi = { version = "0.3.9", features = ["std"] }
shiplift = { version = "0.6.0", default-features = false, features = ["chrono", "tls"], optional = true }

[features]
docker = ["shiplift", "futures-01", "tokio-01"]
kubernetes = ["kube", "kube-runtime", "kube-derive", "k8s-openapi", "tokio-02"]
default = ["docker", "kubernetes"]

[dev-dependencies]
cargo-update = "4"

[profile.release]
lto = "thin"
opt-level = 3

[workspace]
members = ["build"]
